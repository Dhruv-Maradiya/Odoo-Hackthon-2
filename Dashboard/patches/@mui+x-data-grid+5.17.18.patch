diff --git a/node_modules/@mui/x-data-grid/components/GridPagination.js b/node_modules/@mui/x-data-grid/components/GridPagination.js
index a7397b7..c0052c7 100644
--- a/node_modules/@mui/x-data-grid/components/GridPagination.js
+++ b/node_modules/@mui/x-data-grid/components/GridPagination.js
@@ -29,7 +29,7 @@ export const GridPagination = /*#__PURE__*/React.forwardRef(function GridPaginat
   const apiRef = useGridApiContext();
   const rootProps = useGridRootProps();
   const paginationState = useGridSelector(apiRef, gridPaginationSelector);
-  const lastPage = React.useMemo(() => Math.floor(paginationState.rowCount / (paginationState.pageSize || 1)), [paginationState.rowCount, paginationState.pageSize]);
+  const lastPage = React.useMemo(() => paginationState.pageSize === -1 ? 0 : Math.floor(paginationState.rowCount / (paginationState.pageSize || 1)), [paginationState.rowCount, paginationState.pageSize]);
   const handlePageSizeChange = React.useCallback(event => {
     const newPageSize = Number(event.target.value);
     apiRef.current.setPageSize(newPageSize);
@@ -57,7 +57,13 @@ export const GridPagination = /*#__PURE__*/React.forwardRef(function GridPaginat
     component: "div",
     count: paginationState.rowCount,
     page: paginationState.page <= lastPage ? paginationState.page : lastPage,
-    rowsPerPageOptions: (_rootProps$rowsPerPag = rootProps.rowsPerPageOptions) != null && _rootProps$rowsPerPag.includes(paginationState.pageSize) ? rootProps.rowsPerPageOptions : [],
+    rowsPerPageOptions: (_rootProps$rowsPerPag = rootProps.rowsPerPageOptions.map((rowPerPage => {
+      if (typeof rowPerPage === "object") {
+        return rowPerPage.value
+      }
+
+      return rowPerPage
+    }))) != null && _rootProps$rowsPerPag.includes(paginationState.pageSize) ? rootProps.rowsPerPageOptions : [],
     rowsPerPage: paginationState.pageSize,
     onPageChange: handlePageChange,
     onRowsPerPageChange: handlePageSizeChange
diff --git a/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js b/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
index e55f5e3..2d997d0 100644
--- a/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
+++ b/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
@@ -33,7 +33,7 @@ export const gridPageCountSelector = createSelector(gridPaginationSelector, pagi
 export const gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
   const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
   const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);
-  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element
+  const topLevelLastRowIndex = pagination.pageSize === -1 ? visibleTopLevelRowCount : Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element
 
   if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
     return null;
