generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String                     @id @default(uuid()) @db.VarChar(36)
  name                   String                     @default("") @db.VarChar(100)
  email                  String                     @unique(map: "email_UNIQUE") @db.VarChar(100)
  owner                  Boolean                    @default(false)
  enabled                Boolean                    @default(true)
  organizationId         String?                    @db.VarChar(36)
  password               String?                    @db.VarChar(255)
  createdById            String?                    @db.VarChar(36)
  updatedById            String?                    @db.VarChar(36)
  createdAt              DateTime                   @default(now()) @db.Timestamp(0)
  updatedAt              DateTime                   @default(now()) @db.Timestamp(0)
  deleted                Boolean                    @default(false)
  deletedAt              DateTime?
  role                   user_role
  organizationCreatedBy  organization?              @relation("organization_ownerTouser")
  organization           organization?              @relation("user_organizationIdToorganization", fields: [organizationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "organization")
  authProviders          oauth_providers[]
  examInvigilator        exam_invigilator[]
  createdBy              user?                      @relation("user_createdByTouser", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "created_by")
  updatedBy              user?                      @relation("user_updatedByTouser", fields: [updatedById], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "updated_by")
  usersCreatedBy         user[]                     @relation("user_createdByTouser")
  usersUpdatedBy         user[]                     @relation("user_updatedByTouser")
  emailVerificationToken email_verification_token[]
  examCreatedByMe        exam[]                     @relation("exma_createdByTouser")
  examUpdatedByMe        exam[]                     @relation("exma_updatedByTouser")
  audit                  audit[]

  @@index([createdById], map: "created_by_idx")
  @@index([updatedById], map: "updated_by_idx")
  @@index([organizationId], map: "organization_idx")
}

model exam {
  id             String             @id @default(uuid()) @db.VarChar(36)
  name           String             @unique @db.VarChar(100)
  description    String?
  organizationId String             @db.VarChar(36)
  status         exam_status        @default(ONGOING)
  startAt        DateTime
  endAt          DateTime
  createdAt      DateTime           @default(now()) @db.Timestamp(0)
  updatedAt      DateTime           @default(now()) @db.Timestamp(0)
  createdById    String             @db.VarChar(36)
  updatedById    String             @db.VarChar(36)
  createdBy      user               @relation("exma_createdByTouser", fields: [createdById], references: [id], onUpdate: Restrict, onDelete: Restrict)
  updatedBy      user               @relation("exma_updatedByTouser", fields: [updatedById], references: [id], onUpdate: Restrict, onDelete: Restrict)
  organization   organization       @relation(fields: [organizationId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  examPapers     exam_paper[]
  invigilators   exam_invigilator[]
}

model exam_paper {
  id             String       @id @default(uuid()) @db.VarChar(36)
  examId         String       @db.VarChar(36)
  name           String       @default("") @db.VarChar(100)
  createdAt      DateTime     @default(now()) @db.Timestamp(0)
  updatedAt      DateTime     @default(now()) @db.Timestamp(0)
  url            String       @default("") @db.VarChar(255)
  accessStart    DateTime?
  accessEnd      DateTime?
  organizationId String       @db.VarChar(36)
  organization   organization @relation(fields: [organizationId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  exam           exam         @relation(fields: [examId], references: [id], onUpdate: Restrict, onDelete: Restrict)
}

model exam_invigilator {
  id        String   @id @default(uuid()) @db.VarChar(36)
  examId    String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
  exam      exam     @relation(fields: [examId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  user      user     @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@unique([examId, userId], map: "exam_invigilator_UNIQUE")
}

model oauth_providers {
  id        String               @id @default(uuid()) @db.VarChar(36)
  provider  oauth_providers_enum
  userId    String               @db.VarChar(36)
  createdAt DateTime             @default(now()) @db.Timestamp(0)
  updatedAt DateTime             @default(now()) @db.Timestamp(0)
  user      user                 @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@unique([provider, userId], map: "provider_UNIQUE")
}

model organization {
  id         String       @id @default(uuid()) @db.VarChar(36)
  ownerId    String       @unique @db.VarChar(36)
  createdAt  DateTime     @default(now()) @db.Timestamp(0)
  updatedAt  DateTime     @default(now()) @db.Timestamp(0)
  name       String       @default("") @db.VarChar(100)
  owner      user         @relation("organization_ownerTouser", fields: [ownerId], references: [id], onUpdate: Restrict, map: "owner")
  users      user[]       @relation("user_organizationIdToorganization")
  exam       exam[]
  exam_paper exam_paper[]
  audit      audit[]
}

model email_verification_token {
  id         String   @id @default(uuid()) @db.VarChar(36)
  token      String   @unique(map: "token_UNIQUE") @default(uuid()) @db.VarChar(36)
  userId     String   @db.VarChar(36)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@index([userId], map: "email_verification_token_userId_fkey")
}

model audit {
  id             String       @id @default(uuid()) @db.VarChar(36)
  userId         String       @db.VarChar(36)
  action         String       @db.VarChar(100)
  entity         String       @db.VarChar(100)
  message        String       @db.VarChar(255)
  createdAt      DateTime     @default(now()) @db.Timestamp(0)
  organizationId String       @db.VarChar(36)
  organization   organization @relation(fields: [organizationId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  user           user         @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Restrict)
}

model reset_links {
  id          String   @id @default(uuid()) @db.VarChar(36)
  token       String   @unique(map: "token_UNIQUE") @default(uuid()) @db.VarChar(36)
  reset_token String?  @unique(map: "reset_token_UNIQUE") @db.VarChar(36)
  email       String   @db.VarChar(100)
  isUsed      Boolean  @default(false)
  isExpired   Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

enum oauth_providers_enum {
  GOOGLE
  MICROSOFT
  LOCAL
}

enum user_role {
  ADMIN
  EXAMINER
  INVIGILATOR
}

enum exam_status {
  ONGOING
  ARCHIVED
}
